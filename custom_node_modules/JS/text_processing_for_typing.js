// 'use strict';

// const puppeteer = require('puppeteer');
// const fs = require('fs');

// let textForTyping;
// let text;
// let texts = [];
// let startNumber = 5;
// let textNumber = 0;

// async function getTextForTyping(res, url) {
//   // делаем цикл for и проходимся по тексатм и корректируем как нам нужно
//   const browser = await puppeteer.launch({
//     headless: 'new',
//   });
//   const page = await browser.newPage();
//   // await page.setViewport({ width: 1080, height: 1024 });

//   let source = 'https://ilibrary.ru';

//   await page.goto(source);
//   let textLink = await page.$eval('.ltst_l > li > a', (elem) =>
//     elem.getAttribute('href')
//   );
//   console.log(textLink);

//   await page.goto(`${source}${textLink}`);
//   // console.log(`${source}${textLink}`);

//   point: while (true) {
//     for (textNumber = 0; textNumber < 1; textNumber++) {
//       textForTyping = await page.$eval(
//         `.p:nth-child(${startNumber + textNumber})`,
//         (elem) => elem.textContent
//       );

//       text = {
//         id: textNumber,
//         text: textPreparation(textForTyping),
//       };

//       texts.push(text);
//     }

//     if ((await page.$('#bnav > a.navlink:nth-child(3)')) !== null) {
//       startNumber = 3;
//       textLink = await page.$eval('#bnav > a.navlink:nth-child(3)', (elem) =>
//         elem.getAttribute('href')
//       );
//       console.log(textLink);
//       await page.goto(`${source}${textLink}`);
//       continue point;
//     }

//     break;
//   }

//   await browser.close();
//   // вынести парсер в отдельный файл и использовать его одни раз и просто брать из файла

//   // textForTyping = await page.$eval(
//   //   `.p:nth-child(${STARTNUMBER + textNumber})`,
//   //   (elem) => elem.textContent
//   // );

//   // await browser.close();

//   // console.log(textPreparation(textForTyping));

//   // text = {
//   //   id: textNumber++,
//   //   text: textPreparation(textForTyping),
//   // };

//   // texts.push(text);

//   postText(res, url, texts);
// }

// async function postText(res, url, texts) {
//   fs.writeFile(`.${url}`, JSON.stringify(texts, null, 2), (error, data) => {
//     if (error) {
//       console.log(`ошибка при записи текста в ${url}`);
//       return;
//     }
//     console.log(`текст записан в ${url}`);

//     fs.readFile(`.${url}`, { flag: 'r' }, (error, data) => {
//       if (error) {
//         console.log(`ошибка при чтении файла .${url}`);
//         res.end();
//         return;
//       }
//       res.end(data);
//       return;
//     });
//   });
// }

// function textPreparation(textForTyping) {
//   textForTyping = textForTyping.replaceAll('—', '-');

//   textForTyping = textForTyping.trim();

//   return textForTyping;
// }

// exports.getTextForTyping = getTextForTyping;